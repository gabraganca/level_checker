#!/usr/bin/python
'''
# Synspec Level Checker

## Introduction

`Level Checker` is a tool for identifying eletronic transition levels of the
atomic data used by
`Synspec`.

`Synspec` does a automatic identification of the levels, but sometimes it can
get one level wrong. Usually, this happens when the energy levels of the right
and the wrong levels are too similar.

The routine does not check if the levels are correct, it just returns the
levels. To see how to verify the levels, please read the
Methodoloy file found on the repository.

## Usage

By just typing `levelchecker` it will print this message.
For the example on the Methodology file, the script should be called by typing: 

```
levelchecker Si 4 4116.104
```

And it will print how, from where and what are the transistion levels.

If you want all levels from a chemical ionization stage you can type without 
the specific wavelength, i.e.:

levelchecker Si 4
'''

import sys
import os
import re
import levelchecker as lc

HOME = os.getenv('HOME') 

# Find synspec path
SPATH = HOME + '/synplot/' 

if len(sys.argv) == 1:
    print __doc__
elif len(sys.argv) == 3:
    CHEM_ELEMENT = sys.argv[1]
    ION = sys.argv[2]
    # Load JSON file with chemical elements and atomic number
    import json
    PERIODIC = json.load(open(HOME+'/.levelchecker/chemical_elements.json'))
    # Get atomic number
    ATOM = str(PERIODIC[CHEM_ELEMENT])

    # open line list
    fort19 = open(lc.find('fort.19', SPATH)[0]).read()

    # Pattern to get the wavelengths from the line list.
    #Only the weavelength ofr the chemical element and ionization stage are 
    #picked
    ptrn =  '(\d{3}\.\d{4})\s+' + ATOM + '\.0' + \
            str((int(ION) - 1))+ '\s'
    #this function converts to angstrons      
    to_angstron = lambda w: 10*float(w) 
    wavelengths = map(to_angstron, re.findall(ptrn, fort19))

    for wave in wavelengths:
        try:
            lower, upper = lc.get_levels(CHEM_ELEMENT, ION, wave, SPATH)
            print '{:.2f},{},{}'.format(wave, lower, upper)
        except (IOError, IndexError) as e:
            print '{:.2f},{}'.format(wave, e)

else:   
    CHEM_ELEMENT = sys.argv[1]
    ION = sys.argv[2]
    WAVE = sys.argv[3]
    if re.search('\.', WAVE):
        WAVE  = float(WAVE)
    else:
        WAVE = int(WAVE)

    lc.get_levels(CHEM_ELEMENT, ION, WAVE, SPATH, True)
